# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import RegisterAllocationInference_pb2 as RegisterAllocationInference__pb2


class RegisterAllocationInferenceStub(object):
    """General Register Allocation Service 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getInfo = channel.unary_unary(
                '/registerallocationinference.RegisterAllocationInference/getInfo',
                request_serializer=RegisterAllocationInference__pb2.RegisterProfileList.SerializeToString,
                response_deserializer=RegisterAllocationInference__pb2.Data.FromString,
                )


class RegisterAllocationInferenceServicer(object):
    """General Register Allocation Service 
    """

    def getInfo(self, request, context):
        """RPC function to send Inference graph data and receive color data for codegen
        rpc getColouring(Empty) returns (ColorData) {}
        rpc setGraph(GraphList) returns (Data) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisterAllocationInferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getInfo,
                    request_deserializer=RegisterAllocationInference__pb2.RegisterProfileList.FromString,
                    response_serializer=RegisterAllocationInference__pb2.Data.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'registerallocationinference.RegisterAllocationInference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisterAllocationInference(object):
    """General Register Allocation Service 
    """

    @staticmethod
    def getInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registerallocationinference.RegisterAllocationInference/getInfo',
            RegisterAllocationInference__pb2.RegisterProfileList.SerializeToString,
            RegisterAllocationInference__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
